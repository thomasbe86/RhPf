import pandas as pd
import plotly.graph_objects as go
import numpy as np  # Needed for the logarithmic conversion

# Load and reshape the data
file_path = r'C:\Users\thoma\Documents\Peak Graph Data\10_Projects\MSFTU\13 DEC 2024\MOSFERATWO Analysis.xlsx'
data = pd.ExcelFile(file_path)
df = data.parse('DRIVE')

# Convert all "Gain" columns (except Frequency) to decibels
columns_to_convert = [col for col in df.columns if "@" in col]  # Columns with "@" contain gain data
df[columns_to_convert] = 20 * np.log10(df[columns_to_convert])

# Reshape the data for plotting
df_long = df.melt(id_vars="Frequency (Hz)", 
                  var_name="Potentiometer Setting", 
                  value_name="Gain (dB)")

# Extract potentiometer names
potentiometers = df_long["Potentiometer Setting"].str.extract(r'^(.*?) @')[0].unique()

# Create a figure
fig = go.Figure()

# Add traces for each potentiometer
for pot in potentiometers:
    filtered_data = df_long[df_long["Potentiometer Setting"].str.startswith(pot)]
    for setting in filtered_data["Potentiometer Setting"].unique():
        setting_data = filtered_data[filtered_data["Potentiometer Setting"] == setting]
        fig.add_trace(
            go.Scatter(
                x=setting_data["Frequency (Hz)"],
                y=setting_data["Gain (dB)"],
                mode="lines",
                name=setting,
                legendgroup=pot,
                visible=(pot == potentiometers[0])  # Show only the first potentiometer by default
            )
        )

# Create visibility masks for dropdown menu
visibility_masks = []
for pot in potentiometers:
    visibility_masks.append(
        [trace.legendgroup == pot for trace in fig.data]
    )

# Update layout with a dropdown menu and custom tick values
fig.update_layout(
    title="RhPf Electronics - Mosferatwo V1 - Frequency Response",
    xaxis=dict(
        title="Frequency (Hz)",
        type="log",
        tickvals=[20, 32, 64, 128, 256, 512, 1000, 2000, 4000, 8000, 16000, 20000],
        ticktext=["20", "32", "64", "128", "256", "512", "1k", "2k", "4k", "8k", "16k", "20k"]
    ),
    yaxis=dict(title="Gain (dB)"),
    updatemenus=[
        dict(
            buttons=[
                dict(label=pot,
                     method="update",
                     args=[{"visible": visibility_mask},
                           {"title": f"RhPf Electronics - Mosferatwo V1 - Frequency Response for {pot} Knob"}])
                for pot, visibility_mask in zip(potentiometers, visibility_masks)
            ],
            direction="down",
            showactive=True
        )
    ]
)

fig.show()

